// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

/*
Package eth is a generated protocol buffer package.

It is generated from these files:
	streamer.proto

It has these top-level messages:
	Multisig
	Balance
	Nonce
	GasPrice
	BlockHeight
	ETHTransaction
	ContractInfo
	MultisigInfo
	MempoolToDelete
	WatchAddress
	MempoolRecord
	Empty
	RawTx
	AddressToResync
	UsersData
	AddressExtended
	ReplyInfo
	ServiceVersion
*/
package eth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Multisig struct {
	Confirmations  int64    `protobuf:"varint,1,opt,name=Confirmations" json:"Confirmations,omitempty"`
	FactoryAddress string   `protobuf:"bytes,2,opt,name=FactoryAddress" json:"FactoryAddress,omitempty"`
	TxOfCreation   string   `protobuf:"bytes,3,opt,name=TxOfCreation" json:"TxOfCreation,omitempty"`
	Contract       string   `protobuf:"bytes,4,opt,name=Contract" json:"Contract,omitempty"`
	DeployStatus   int64    `protobuf:"varint,5,opt,name=DeployStatus" json:"DeployStatus,omitempty"`
	Addresses      []string `protobuf:"bytes,6,rep,name=Addresses" json:"Addresses,omitempty"`
}

func (m *Multisig) Reset()                    { *m = Multisig{} }
func (m *Multisig) String() string            { return proto.CompactTextString(m) }
func (*Multisig) ProtoMessage()               {}
func (*Multisig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Multisig) GetConfirmations() int64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *Multisig) GetFactoryAddress() string {
	if m != nil {
		return m.FactoryAddress
	}
	return ""
}

func (m *Multisig) GetTxOfCreation() string {
	if m != nil {
		return m.TxOfCreation
	}
	return ""
}

func (m *Multisig) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Multisig) GetDeployStatus() int64 {
	if m != nil {
		return m.DeployStatus
	}
	return 0
}

func (m *Multisig) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Balance struct {
	Balance        string `protobuf:"bytes,1,opt,name=Balance" json:"Balance,omitempty"`
	PendingBalance string `protobuf:"bytes,2,opt,name=PendingBalance" json:"PendingBalance,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *Balance) GetPendingBalance() string {
	if m != nil {
		return m.PendingBalance
	}
	return ""
}

type Nonce struct {
	Nonce int64 `protobuf:"varint,1,opt,name=Nonce" json:"Nonce,omitempty"`
}

func (m *Nonce) Reset()                    { *m = Nonce{} }
func (m *Nonce) String() string            { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()               {}
func (*Nonce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Nonce) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type GasPrice struct {
	Gas string `protobuf:"bytes,1,opt,name=Gas" json:"Gas,omitempty"`
}

func (m *GasPrice) Reset()                    { *m = GasPrice{} }
func (m *GasPrice) String() string            { return proto.CompactTextString(m) }
func (*GasPrice) ProtoMessage()               {}
func (*GasPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GasPrice) GetGas() string {
	if m != nil {
		return m.Gas
	}
	return ""
}

type BlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *BlockHeight) Reset()                    { *m = BlockHeight{} }
func (m *BlockHeight) String() string            { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()               {}
func (*BlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ETHTransaction struct {
	UserID           string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex      int32  `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex     int32  `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
	Hash             string `protobuf:"bytes,4,opt,name=Hash" json:"Hash,omitempty"`
	From             string `protobuf:"bytes,5,opt,name=From" json:"From,omitempty"`
	To               string `protobuf:"bytes,6,opt,name=To" json:"To,omitempty"`
	Amount           string `protobuf:"bytes,7,opt,name=Amount" json:"Amount,omitempty"`
	Input            string `protobuf:"bytes,8,opt,name=input" json:"input,omitempty"`
	GasPrice         int64  `protobuf:"varint,9,opt,name=GasPrice" json:"GasPrice,omitempty"`
	GasLimit         int64  `protobuf:"varint,10,opt,name=GasLimit" json:"GasLimit,omitempty"`
	Nonce            int32  `protobuf:"varint,11,opt,name=Nonce" json:"Nonce,omitempty"`
	Status           int32  `protobuf:"varint,12,opt,name=Status" json:"Status,omitempty"`
	BlockTime        int64  `protobuf:"varint,13,opt,name=BlockTime" json:"BlockTime,omitempty"`
	TxpoolTime       int64  `protobuf:"varint,14,opt,name=TxpoolTime" json:"TxpoolTime,omitempty"`
	BlockHeight      int64  `protobuf:"varint,15,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
	Resync           bool   `protobuf:"varint,16,opt,name=Resync" json:"Resync,omitempty"`
	Multisig         bool   `protobuf:"varint,17,opt,name=Multisig" json:"Multisig,omitempty"`
	Contract         string `protobuf:"bytes,18,opt,name=Contract" json:"Contract,omitempty"`
	MethodInvoked    string `protobuf:"bytes,19,opt,name=MethodInvoked" json:"MethodInvoked,omitempty"`
	Return           string `protobuf:"bytes,20,opt,name=return" json:"return,omitempty"`
	InvocationStatus bool   `protobuf:"varint,21,opt,name=InvocationStatus" json:"InvocationStatus,omitempty"`
}

func (m *ETHTransaction) Reset()                    { *m = ETHTransaction{} }
func (m *ETHTransaction) String() string            { return proto.CompactTextString(m) }
func (*ETHTransaction) ProtoMessage()               {}
func (*ETHTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ETHTransaction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ETHTransaction) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *ETHTransaction) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

func (m *ETHTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ETHTransaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ETHTransaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ETHTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ETHTransaction) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ETHTransaction) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ETHTransaction) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ETHTransaction) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ETHTransaction) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ETHTransaction) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ETHTransaction) GetTxpoolTime() int64 {
	if m != nil {
		return m.TxpoolTime
	}
	return 0
}

func (m *ETHTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ETHTransaction) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

func (m *ETHTransaction) GetMultisig() bool {
	if m != nil {
		return m.Multisig
	}
	return false
}

func (m *ETHTransaction) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ETHTransaction) GetMethodInvoked() string {
	if m != nil {
		return m.MethodInvoked
	}
	return ""
}

func (m *ETHTransaction) GetReturn() string {
	if m != nil {
		return m.Return
	}
	return ""
}

func (m *ETHTransaction) GetInvocationStatus() bool {
	if m != nil {
		return m.InvocationStatus
	}
	return false
}

type ContractInfo struct {
	ConfirmationsRequired int64    `protobuf:"varint,1,opt,name=ConfirmationsRequired" json:"ConfirmationsRequired,omitempty"`
	ContractOwners        []string `protobuf:"bytes,2,rep,name=ContractOwners" json:"ContractOwners,omitempty"`
}

func (m *ContractInfo) Reset()                    { *m = ContractInfo{} }
func (m *ContractInfo) String() string            { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()               {}
func (*ContractInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ContractInfo) GetConfirmationsRequired() int64 {
	if m != nil {
		return m.ConfirmationsRequired
	}
	return 0
}

func (m *ContractInfo) GetContractOwners() []string {
	if m != nil {
		return m.ContractOwners
	}
	return nil
}

type MultisigInfo struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *MultisigInfo) Reset()                    { *m = MultisigInfo{} }
func (m *MultisigInfo) String() string            { return proto.CompactTextString(m) }
func (*MultisigInfo) ProtoMessage()               {}
func (*MultisigInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MultisigInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MempoolToDelete struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *MempoolToDelete) Reset()                    { *m = MempoolToDelete{} }
func (m *MempoolToDelete) String() string            { return proto.CompactTextString(m) }
func (*MempoolToDelete) ProtoMessage()               {}
func (*MempoolToDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MempoolToDelete) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type WatchAddress struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *WatchAddress) Reset()                    { *m = WatchAddress{} }
func (m *WatchAddress) String() string            { return proto.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()               {}
func (*WatchAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type MempoolRecord struct {
	Category int32  `protobuf:"varint,1,opt,name=category" json:"category,omitempty"`
	HashTX   string `protobuf:"bytes,2,opt,name=hashTX" json:"hashTX,omitempty"`
}

func (m *MempoolRecord) Reset()                    { *m = MempoolRecord{} }
func (m *MempoolRecord) String() string            { return proto.CompactTextString(m) }
func (*MempoolRecord) ProtoMessage()               {}
func (*MempoolRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MempoolRecord) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *MempoolRecord) GetHashTX() string {
	if m != nil {
		return m.HashTX
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type RawTx struct {
	Transaction string `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RawTx) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

type AddressToResync struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *AddressToResync) Reset()                    { *m = AddressToResync{} }
func (m *AddressToResync) String() string            { return proto.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()               {}
func (*AddressToResync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UsersData struct {
	Map            map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UsersContracts map[string]string           `protobuf:"bytes,2,rep,name=UsersContracts" json:"UsersContracts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsersData) Reset()                    { *m = UsersData{} }
func (m *UsersData) String() string            { return proto.CompactTextString(m) }
func (*UsersData) ProtoMessage()               {}
func (*UsersData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *UsersData) GetUsersContracts() map[string]string {
	if m != nil {
		return m.UsersContracts
	}
	return nil
}

type AddressExtended struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressExtended) Reset()                    { *m = AddressExtended{} }
func (m *AddressExtended) String() string            { return proto.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()               {}
func (*AddressExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyInfo) Reset()                    { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()               {}
func (*ReplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ServiceVersion struct {
	Branch    string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Buildtime string `protobuf:"bytes,3,opt,name=buildtime" json:"buildtime,omitempty"`
	Lasttag   string `protobuf:"bytes,4,opt,name=lasttag" json:"lasttag,omitempty"`
}

func (m *ServiceVersion) Reset()                    { *m = ServiceVersion{} }
func (m *ServiceVersion) String() string            { return proto.CompactTextString(m) }
func (*ServiceVersion) ProtoMessage()               {}
func (*ServiceVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ServiceVersion) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ServiceVersion) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *ServiceVersion) GetBuildtime() string {
	if m != nil {
		return m.Buildtime
	}
	return ""
}

func (m *ServiceVersion) GetLasttag() string {
	if m != nil {
		return m.Lasttag
	}
	return ""
}

func init() {
	proto.RegisterType((*Multisig)(nil), "eth.Multisig")
	proto.RegisterType((*Balance)(nil), "eth.Balance")
	proto.RegisterType((*Nonce)(nil), "eth.Nonce")
	proto.RegisterType((*GasPrice)(nil), "eth.GasPrice")
	proto.RegisterType((*BlockHeight)(nil), "eth.BlockHeight")
	proto.RegisterType((*ETHTransaction)(nil), "eth.ETHTransaction")
	proto.RegisterType((*ContractInfo)(nil), "eth.ContractInfo")
	proto.RegisterType((*MultisigInfo)(nil), "eth.MultisigInfo")
	proto.RegisterType((*MempoolToDelete)(nil), "eth.MempoolToDelete")
	proto.RegisterType((*WatchAddress)(nil), "eth.WatchAddress")
	proto.RegisterType((*MempoolRecord)(nil), "eth.MempoolRecord")
	proto.RegisterType((*Empty)(nil), "eth.Empty")
	proto.RegisterType((*RawTx)(nil), "eth.RawTx")
	proto.RegisterType((*AddressToResync)(nil), "eth.AddressToResync")
	proto.RegisterType((*UsersData)(nil), "eth.UsersData")
	proto.RegisterType((*AddressExtended)(nil), "eth.AddressExtended")
	proto.RegisterType((*ReplyInfo)(nil), "eth.ReplyInfo")
	proto.RegisterType((*ServiceVersion)(nil), "eth.ServiceVersion")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommuunications service

type NodeCommuunicationsClient interface {
	ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error)
	EventGetGasPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GasPrice, error)
	EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventAddNewMultisig(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	EventGetCode(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error)
	EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error)
	EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error)
	EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error)
	EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error)
	EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error)
	EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error)
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error)
	SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error)
	//  Multisig methods
	AddMultisig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_AddMultisigClient, error)
	GetMultisigInfo(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ContractInfo, error)
}

type nodeCommuunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommuunicationsClient(cc *grpc.ClientConn) NodeCommuunicationsClient {
	return &nodeCommuunicationsClient{cc}
}

func (c *nodeCommuunicationsClient) ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error) {
	out := new(ServiceVersion)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/ServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetGasPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GasPrice, error) {
	out := new(GasPrice)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetGasPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventInitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventAddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventAddNewMultisig(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventAddNewMultisig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetCode(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressNonce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[0], c.cc, "/eth.NodeCommuunications/EventGetAllMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventGetAllMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventGetAllMempoolClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventGetAllMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventGetAllMempoolClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[1], c.cc, "/eth.NodeCommuunications/EventAddMempoolRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventAddMempoolRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventAddMempoolRecordClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventAddMempoolRecordClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[2], c.cc, "/eth.NodeCommuunications/EventDeleteMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventDeleteMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventDeleteMempoolClient interface {
	Recv() (*MempoolToDelete, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventDeleteMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventDeleteMempoolClient) Recv() (*MempoolToDelete, error) {
	m := new(MempoolToDelete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[3], c.cc, "/eth.NodeCommuunications/EventNewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventNewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventNewBlockClient interface {
	Recv() (*BlockHeight, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventNewBlockClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventNewBlockClient) Recv() (*BlockHeight, error) {
	m := new(BlockHeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventSendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[4], c.cc, "/eth.NodeCommuunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_NewTxClient interface {
	Recv() (*ETHTransaction, error)
	grpc.ClientStream
}

type nodeCommuunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsNewTxClient) Recv() (*ETHTransaction, error) {
	m := new(ETHTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/SyncState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) AddMultisig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_AddMultisigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[5], c.cc, "/eth.NodeCommuunications/AddMultisig", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsAddMultisigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_AddMultisigClient interface {
	Recv() (*Multisig, error)
	grpc.ClientStream
}

type nodeCommuunicationsAddMultisigClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsAddMultisigClient) Recv() (*Multisig, error) {
	m := new(Multisig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) GetMultisigInfo(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ContractInfo, error) {
	out := new(ContractInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/GetMultisigInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeCommuunications service

type NodeCommuunicationsServer interface {
	ServiceInfo(context.Context, *Empty) (*ServiceVersion, error)
	EventGetGasPrice(context.Context, *Empty) (*GasPrice, error)
	EventInitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	EventAddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	EventAddNewMultisig(context.Context, *WatchAddress) (*ReplyInfo, error)
	EventGetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	EventGetCode(context.Context, *AddressToResync) (*ReplyInfo, error)
	EventGetAdressNonce(context.Context, *AddressToResync) (*Nonce, error)
	EventGetAdressBalance(context.Context, *AddressToResync) (*Balance, error)
	EventGetAllMempool(*Empty, NodeCommuunications_EventGetAllMempoolServer) error
	EventAddMempoolRecord(*Empty, NodeCommuunications_EventAddMempoolRecordServer) error
	EventDeleteMempool(*Empty, NodeCommuunications_EventDeleteMempoolServer) error
	EventResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	EventNewBlock(*Empty, NodeCommuunications_EventNewBlockServer) error
	EventSendRawTx(context.Context, *RawTx) (*ReplyInfo, error)
	NewTx(*Empty, NodeCommuunications_NewTxServer) error
	SyncState(context.Context, *BlockHeight) (*ReplyInfo, error)
	//  Multisig methods
	AddMultisig(*Empty, NodeCommuunications_AddMultisigServer) error
	GetMultisigInfo(context.Context, *AddressToResync) (*ContractInfo, error)
}

func RegisterNodeCommuunicationsServer(s *grpc.Server, srv NodeCommuunicationsServer) {
	s.RegisterService(&_NodeCommuunications_serviceDesc, srv)
}

func _NodeCommuunications_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetGasPrice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventInitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventInitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventAddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventAddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventAddNewMultisig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventAddNewMultisig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventAddNewMultisig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventAddNewMultisig(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetCode(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAllMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventGetAllMempool(m, &nodeCommuunicationsEventGetAllMempoolServer{stream})
}

type NodeCommuunications_EventGetAllMempoolServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventGetAllMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventGetAllMempoolServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventAddMempoolRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventAddMempoolRecord(m, &nodeCommuunicationsEventAddMempoolRecordServer{stream})
}

type NodeCommuunications_EventAddMempoolRecordServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventAddMempoolRecordServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventDeleteMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventDeleteMempool(m, &nodeCommuunicationsEventDeleteMempoolServer{stream})
}

type NodeCommuunications_EventDeleteMempoolServer interface {
	Send(*MempoolToDelete) error
	grpc.ServerStream
}

type nodeCommuunicationsEventDeleteMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventDeleteMempoolServer) Send(m *MempoolToDelete) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventNewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventNewBlock(m, &nodeCommuunicationsEventNewBlockServer{stream})
}

type NodeCommuunications_EventNewBlockServer interface {
	Send(*BlockHeight) error
	grpc.ServerStream
}

type nodeCommuunicationsEventNewBlockServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventNewBlockServer) Send(m *BlockHeight) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventSendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventSendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).NewTx(m, &nodeCommuunicationsNewTxServer{stream})
}

type NodeCommuunications_NewTxServer interface {
	Send(*ETHTransaction) error
	grpc.ServerStream
}

type nodeCommuunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsNewTxServer) Send(m *ETHTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_AddMultisig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).AddMultisig(m, &nodeCommuunicationsAddMultisigServer{stream})
}

type NodeCommuunications_AddMultisigServer interface {
	Send(*Multisig) error
	grpc.ServerStream
}

type nodeCommuunicationsAddMultisigServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsAddMultisigServer) Send(m *Multisig) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_GetMultisigInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).GetMultisigInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/GetMultisigInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).GetMultisigInfo(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeCommuunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eth.NodeCommuunications",
	HandlerType: (*NodeCommuunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _NodeCommuunications_ServiceInfo_Handler,
		},
		{
			MethodName: "EventGetGasPrice",
			Handler:    _NodeCommuunications_EventGetGasPrice_Handler,
		},
		{
			MethodName: "EventInitialAdd",
			Handler:    _NodeCommuunications_EventInitialAdd_Handler,
		},
		{
			MethodName: "EventAddNewAddress",
			Handler:    _NodeCommuunications_EventAddNewAddress_Handler,
		},
		{
			MethodName: "EventAddNewMultisig",
			Handler:    _NodeCommuunications_EventAddNewMultisig_Handler,
		},
		{
			MethodName: "EventGetBlockHeight",
			Handler:    _NodeCommuunications_EventGetBlockHeight_Handler,
		},
		{
			MethodName: "EventGetCode",
			Handler:    _NodeCommuunications_EventGetCode_Handler,
		},
		{
			MethodName: "EventGetAdressNonce",
			Handler:    _NodeCommuunications_EventGetAdressNonce_Handler,
		},
		{
			MethodName: "EventGetAdressBalance",
			Handler:    _NodeCommuunications_EventGetAdressBalance_Handler,
		},
		{
			MethodName: "EventResyncAddress",
			Handler:    _NodeCommuunications_EventResyncAddress_Handler,
		},
		{
			MethodName: "EventSendRawTx",
			Handler:    _NodeCommuunications_EventSendRawTx_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _NodeCommuunications_SyncState_Handler,
		},
		{
			MethodName: "GetMultisigInfo",
			Handler:    _NodeCommuunications_GetMultisigInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventGetAllMempool",
			Handler:       _NodeCommuunications_EventGetAllMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventAddMempoolRecord",
			Handler:       _NodeCommuunications_EventAddMempoolRecord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventDeleteMempool",
			Handler:       _NodeCommuunications_EventDeleteMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventNewBlock",
			Handler:       _NodeCommuunications_EventNewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommuunications_NewTx_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddMultisig",
			Handler:       _NodeCommuunications_AddMultisig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xef, 0x72, 0xdb, 0x44,
	0x10, 0xb7, 0xe3, 0xd8, 0xb1, 0xd7, 0x8e, 0x93, 0x5e, 0xd2, 0xa2, 0xc9, 0x14, 0x26, 0x73, 0xd3,
	0x76, 0xd2, 0xc2, 0xa4, 0x25, 0x05, 0xa6, 0x14, 0xf8, 0xe0, 0x3a, 0x69, 0x1a, 0x68, 0xd2, 0x8e,
	0x62, 0x28, 0x5f, 0xaf, 0xd2, 0xd6, 0xd6, 0x44, 0xd2, 0x19, 0xe9, 0x9c, 0xd8, 0x2f, 0xc0, 0x0b,
	0xf0, 0x1a, 0x3c, 0x0e, 0x9f, 0x78, 0x1a, 0xe6, 0xf6, 0x4e, 0xb2, 0xe4, 0xb8, 0xd3, 0x7c, 0xe1,
	0xdb, 0xfe, 0xfb, 0xdd, 0xfe, 0xb9, 0xdd, 0x3d, 0x09, 0xba, 0xa9, 0x4a, 0x50, 0x44, 0x98, 0xec,
	0x8f, 0x13, 0xa9, 0x24, 0xab, 0xa1, 0x1a, 0xf1, 0x7f, 0xab, 0xd0, 0x3c, 0x9d, 0x84, 0x2a, 0x48,
	0x83, 0x21, 0xbb, 0x07, 0xeb, 0x7d, 0x19, 0x7f, 0x08, 0x92, 0x48, 0xa8, 0x40, 0xc6, 0xa9, 0x53,
	0xdd, 0xad, 0xee, 0xd5, 0xdc, 0xb2, 0x90, 0x3d, 0x80, 0xee, 0x4b, 0xe1, 0x29, 0x99, 0xcc, 0x7a,
	0xbe, 0x9f, 0x60, 0x9a, 0x3a, 0x2b, 0xbb, 0xd5, 0xbd, 0x96, 0xbb, 0x20, 0x65, 0x1c, 0x3a, 0x83,
	0xe9, 0x9b, 0x0f, 0xfd, 0x04, 0x09, 0xe8, 0xd4, 0xc8, 0xaa, 0x24, 0x63, 0x3b, 0xd0, 0xec, 0xcb,
	0x58, 0x25, 0xc2, 0x53, 0xce, 0x2a, 0xe9, 0x73, 0x5e, 0xe3, 0x0f, 0x71, 0x1c, 0xca, 0xd9, 0xb9,
	0x12, 0x6a, 0x92, 0x3a, 0x75, 0x0a, 0xa6, 0x24, 0x63, 0x77, 0xa1, 0x65, 0xdd, 0x61, 0xea, 0x34,
	0x76, 0x6b, 0x7b, 0x2d, 0x77, 0x2e, 0xe0, 0xbf, 0xc0, 0xda, 0x0b, 0x11, 0x8a, 0xd8, 0x43, 0xe6,
	0xe4, 0x24, 0x25, 0xd5, 0x72, 0x73, 0xcd, 0x03, 0xe8, 0xbe, 0xc5, 0xd8, 0x0f, 0xe2, 0x61, 0x66,
	0x60, 0xd3, 0x29, 0x4b, 0xf9, 0xe7, 0x50, 0x3f, 0x93, 0x1a, 0xb0, 0x6d, 0x09, 0x5b, 0x1d, 0xc3,
	0xf0, 0xbb, 0xd0, 0x3c, 0x16, 0xe9, 0xdb, 0x24, 0xf0, 0x90, 0x6d, 0x42, 0xed, 0x58, 0xa4, 0xd6,
	0x91, 0x26, 0xf9, 0x7d, 0x68, 0xbf, 0x08, 0xa5, 0x77, 0xf1, 0x0a, 0x83, 0xe1, 0x48, 0xb1, 0x3b,
	0xd0, 0x18, 0x11, 0x65, 0xcf, 0xb0, 0x1c, 0xff, 0x67, 0x15, 0xba, 0x47, 0x83, 0x57, 0x83, 0x44,
	0xc4, 0xa9, 0xf0, 0xa8, 0x42, 0x77, 0xa0, 0xf1, 0x6b, 0x8a, 0xc9, 0xc9, 0xa1, 0x3d, 0xce, 0x72,
	0x6c, 0x17, 0xda, 0xef, 0x44, 0x18, 0xa2, 0x3a, 0x89, 0x7d, 0x9c, 0x52, 0xcc, 0x75, 0xb7, 0x28,
	0xd2, 0xf5, 0xb3, 0xa5, 0x30, 0x26, 0x35, 0x32, 0x29, 0xc9, 0x18, 0x83, 0xd5, 0x57, 0x22, 0x1d,
	0xd9, 0xda, 0x13, 0xad, 0x65, 0x2f, 0x13, 0x19, 0x51, 0xbd, 0x5b, 0x2e, 0xd1, 0xac, 0x0b, 0x2b,
	0x03, 0xe9, 0x34, 0x48, 0xb2, 0x32, 0x90, 0x3a, 0xaa, 0x5e, 0x24, 0x27, 0xb1, 0x72, 0xd6, 0x4c,
	0x54, 0x86, 0xd3, 0xb5, 0x09, 0xe2, 0xf1, 0x44, 0x39, 0x4d, 0x12, 0x1b, 0x46, 0xdf, 0x72, 0x56,
	0x1b, 0xa7, 0x45, 0x09, 0xcf, 0x6b, 0x65, 0x74, 0xaf, 0x83, 0x28, 0x50, 0x0e, 0xe4, 0x3a, 0xe2,
	0xe7, 0x95, 0x6e, 0x53, 0xe8, 0xb6, 0xfe, 0x77, 0xa0, 0x61, 0x3b, 0xa2, 0x43, 0xe2, 0xc6, 0xbc,
	0x17, 0xa8, 0xc6, 0x83, 0x20, 0x42, 0x67, 0x9d, 0x8e, 0x9a, 0x0b, 0xd8, 0x17, 0x00, 0x83, 0xe9,
	0x58, 0xca, 0x90, 0xd4, 0x5d, 0x52, 0x17, 0x24, 0xba, 0x9e, 0x85, 0x1b, 0x72, 0x36, 0xc8, 0x60,
	0xf1, 0xd2, 0x5c, 0x4c, 0x67, 0xb1, 0xe7, 0x6c, 0xee, 0x56, 0xf7, 0x9a, 0xae, 0xe5, 0x74, 0x06,
	0xd9, 0x04, 0x39, 0xb7, 0x48, 0x33, 0x9f, 0xa8, 0x62, 0x7f, 0xb3, 0x85, 0xfe, 0xbe, 0x07, 0xeb,
	0xa7, 0xa8, 0x46, 0xd2, 0x3f, 0x89, 0x2f, 0xe5, 0x05, 0xfa, 0xce, 0x16, 0x19, 0x94, 0x85, 0xda,
	0x6b, 0x82, 0x6a, 0x92, 0xc4, 0xce, 0xb6, 0xa9, 0xb4, 0xe1, 0xd8, 0x23, 0xd8, 0xd4, 0x26, 0x1e,
	0xcd, 0x91, 0xad, 0xc7, 0x6d, 0xf2, 0x7e, 0x4d, 0xce, 0x43, 0xe8, 0x64, 0x5e, 0x4f, 0xe2, 0x0f,
	0x92, 0x7d, 0x03, 0xb7, 0x4b, 0x23, 0xed, 0xe2, 0x1f, 0x93, 0x20, 0x41, 0xdf, 0x76, 0xe3, 0x72,
	0xa5, 0x1e, 0x94, 0xec, 0x94, 0x37, 0x57, 0x31, 0x26, 0x7a, 0xee, 0xf5, 0xc0, 0x2d, 0x48, 0xf9,
	0x03, 0xe8, 0x64, 0xf9, 0x93, 0xb7, 0x8f, 0x35, 0xfb, 0x7d, 0xd8, 0x38, 0xc5, 0x88, 0x2e, 0x40,
	0x1e, 0x62, 0x88, 0x0a, 0x75, 0xeb, 0x8d, 0x74, 0x3b, 0x9a, 0x56, 0x27, 0x9a, 0xff, 0x59, 0x85,
	0xce, 0x3b, 0xa1, 0xbc, 0x51, 0xb6, 0x57, 0x1c, 0x58, 0x13, 0x76, 0xf1, 0xd8, 0x51, 0xb6, 0xac,
	0xf6, 0x34, 0x31, 0xb3, 0x62, 0x46, 0xd8, 0x72, 0x8b, 0xb3, 0x52, 0xfb, 0xf4, 0xac, 0xac, 0x5e,
	0x9f, 0x15, 0xde, 0xd7, 0xf7, 0x45, 0xf1, 0xba, 0xe8, 0xc9, 0xc4, 0xd7, 0x97, 0xeb, 0x09, 0x85,
	0x43, 0x99, 0xcc, 0x28, 0x92, 0xba, 0x9b, 0xf3, 0x94, 0xb4, 0x48, 0x47, 0x83, 0xdf, 0xb3, 0x50,
	0x0c, 0xc7, 0xd7, 0xa0, 0x7e, 0x14, 0x8d, 0xd5, 0x8c, 0x3f, 0x84, 0xba, 0x2b, 0xae, 0x06, 0x53,
	0x1d, 0x9c, 0x9a, 0xcf, 0xbb, 0x4d, 0xa9, 0x28, 0xe2, 0x5f, 0xc2, 0x86, 0x0d, 0x64, 0x20, 0x6d,
	0xcf, 0x7d, 0xb4, 0x06, 0xfc, 0xaf, 0x15, 0x68, 0xe9, 0x15, 0x91, 0x1e, 0x0a, 0x25, 0xd8, 0x43,
	0xa8, 0x45, 0x62, 0xec, 0x54, 0x77, 0x6b, 0x7b, 0xed, 0x83, 0xcf, 0xf6, 0x51, 0x8d, 0xf6, 0x73,
	0xe5, 0xfe, 0xa9, 0x18, 0x1f, 0xc5, 0x2a, 0x99, 0xb9, 0xda, 0x86, 0xfd, 0x0c, 0x5d, 0x52, 0x65,
	0xb7, 0x69, 0xae, 0xb7, 0x7d, 0xc0, 0x17, 0x50, 0x65, 0x23, 0x73, 0xc0, 0x02, 0x72, 0xe7, 0x35,
	0x34, 0xb3, 0xc3, 0xf5, 0x32, 0xbc, 0xc0, 0x59, 0xb6, 0x0c, 0x2f, 0x70, 0xc6, 0x1e, 0x41, 0xfd,
	0x52, 0x84, 0x13, 0xb3, 0x68, 0xdb, 0x07, 0xdb, 0xe4, 0xc0, 0x66, 0x78, 0x34, 0x55, 0x18, 0xfb,
	0xe8, 0xbb, 0xc6, 0xe4, 0xf9, 0xca, 0xb3, 0xea, 0x4e, 0x0f, 0xb6, 0x96, 0x38, 0x5d, 0x72, 0xf0,
	0x76, 0xf1, 0xe0, 0x56, 0xe1, 0x08, 0x2e, 0xf3, 0x12, 0x66, 0x0e, 0xfe, 0xdf, 0xc5, 0xca, 0xef,
	0x43, 0xcb, 0xc5, 0x71, 0x38, 0xa3, 0x09, 0x70, 0x60, 0x2d, 0xc2, 0x34, 0x15, 0xc3, 0xfc, 0xf1,
	0xb1, 0x2c, 0x9f, 0x42, 0xf7, 0x1c, 0x93, 0xcb, 0xc0, 0xc3, 0xdf, 0x30, 0x49, 0xed, 0xbe, 0x7f,
	0x9f, 0x88, 0xd8, 0xcb, 0x86, 0xc0, 0x72, 0x5a, 0xee, 0xc9, 0x48, 0x6f, 0x49, 0xdb, 0x50, 0x86,
	0xd3, 0x5b, 0xef, 0xfd, 0x24, 0x08, 0x7d, 0xa5, 0xd7, 0x9a, 0x79, 0x62, 0xe7, 0x02, 0xed, 0x39,
	0x14, 0xa9, 0x52, 0x62, 0x68, 0x57, 0x7c, 0xc6, 0x1e, 0xfc, 0xdd, 0x84, 0xad, 0x33, 0xe9, 0x63,
	0x5f, 0x46, 0xd1, 0x64, 0x12, 0x07, 0x9e, 0x7d, 0xdd, 0x9f, 0x40, 0xdb, 0x46, 0x44, 0xa1, 0x03,
	0x5d, 0x0e, 0xb5, 0xec, 0xce, 0x16, 0xd1, 0xe5, 0x78, 0x79, 0x85, 0x3d, 0x86, 0xcd, 0xa3, 0x4b,
	0x8c, 0xd5, 0x31, 0xaa, 0x7c, 0xab, 0x17, 0x61, 0xeb, 0x44, 0x67, 0x2a, 0x5e, 0x61, 0x4f, 0x61,
	0x83, 0x00, 0x27, 0x71, 0xa0, 0x02, 0x11, 0xf6, 0x7c, 0x9f, 0x75, 0xcb, 0x4d, 0xb6, 0x63, 0xf8,
	0xbc, 0x82, 0xbc, 0xc2, 0xbe, 0x07, 0x46, 0xa0, 0x9e, 0xef, 0x9f, 0xe1, 0x55, 0xb6, 0x0b, 0x6e,
	0x91, 0x5d, 0x71, 0x3d, 0x2c, 0x81, 0x3e, 0x87, 0xad, 0x02, 0x34, 0xdf, 0xcd, 0x37, 0xc2, 0x7e,
	0x6b, 0xb1, 0xc7, 0xa8, 0x8a, 0x6f, 0x41, 0x31, 0xbf, 0x4d, 0xa2, 0x0b, 0x5a, 0x5e, 0x61, 0xdf,
	0x41, 0x27, 0x83, 0xf5, 0xa5, 0x8f, 0xac, 0xd4, 0xe3, 0xd9, 0x14, 0x2f, 0xcd, 0x32, 0x77, 0xd7,
	0x23, 0x5b, 0xfb, 0xc9, 0xb1, 0x14, 0x6e, 0x82, 0x30, 0x9f, 0x1f, 0x15, 0xf6, 0x13, 0xdc, 0x2e,
	0x43, 0xb3, 0x0f, 0x9c, 0xe5, 0xe0, 0x8e, 0x89, 0xda, 0x7e, 0xdc, 0x54, 0xd8, 0x33, 0x5b, 0x5f,
	0x0d, 0x0f, 0x43, 0xbb, 0xe8, 0x4a, 0x79, 0x32, 0xa2, 0x4b, 0x2b, 0x90, 0x57, 0x9e, 0x54, 0xd9,
	0x0f, 0xd6, 0x71, 0xcf, 0xf7, 0xcb, 0xfb, 0xf1, 0x26, 0xe0, 0xe7, 0xd6, 0xad, 0x79, 0x00, 0x96,
	0xb9, 0xdd, 0x2e, 0x22, 0xb3, 0x97, 0x82, 0xb0, 0x3f, 0x5a, 0xac, 0xc9, 0x28, 0x6b, 0x89, 0x9b,
	0x96, 0xfa, 0x6b, 0x58, 0x27, 0xf4, 0x19, 0x5e, 0xd1, 0xdd, 0x7d, 0xea, 0x4e, 0x9f, 0x54, 0xd9,
	0x3e, 0x74, 0x09, 0x72, 0x8e, 0xb1, 0x6f, 0x96, 0xb7, 0xc1, 0x10, 0xbd, 0xc4, 0xc5, 0x57, 0x50,
	0x3f, 0xc3, 0xb9, 0x59, 0x71, 0x8a, 0xca, 0x5f, 0x79, 0x74, 0xfa, 0x63, 0x68, 0x9d, 0xcf, 0x62,
	0x4f, 0xbf, 0xd9, 0xc8, 0xae, 0x05, 0xb0, 0xf4, 0xf8, 0xb6, 0xae, 0x79, 0xd6, 0xcf, 0xd7, 0x67,
	0x2e, 0x53, 0xd9, 0x6a, 0x6d, 0x1c, 0xa3, 0x2a, 0xbd, 0xcc, 0xcb, 0x4b, 0x65, 0xe6, 0xa2, 0xf8,
	0xc1, 0xc0, 0x2b, 0xef, 0x1b, 0xf4, 0xcf, 0xf0, 0xf4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96,
	0xf9, 0x78, 0x61, 0x45, 0x0c, 0x00, 0x00,
}
