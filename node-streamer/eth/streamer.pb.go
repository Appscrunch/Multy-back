// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

/*
Package eth is a generated protocol buffer package.

It is generated from these files:
	streamer.proto

It has these top-level messages:
	Balance
	Nonce
	ETHTransaction
	BlockHeight
	MempoolToDelete
	WatchAddress
	MempoolRecord
	Empty
	RawTx
	AddressToResync
	UsersData
	AddressExtended
	ReplyInfo
*/
package eth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Balance struct {
	Balance string `protobuf:"bytes,1,opt,name=Balance" json:"Balance,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type Nonce struct {
	Nonce int64 `protobuf:"varint,1,opt,name=Nonce" json:"Nonce,omitempty"`
}

func (m *Nonce) Reset()                    { *m = Nonce{} }
func (m *Nonce) String() string            { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()               {}
func (*Nonce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Nonce) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type ETHTransaction struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
	Hash         string `protobuf:"bytes,4,opt,name=Hash" json:"Hash,omitempty"`
	From         string `protobuf:"bytes,5,opt,name=From" json:"From,omitempty"`
	To           string `protobuf:"bytes,6,opt,name=To" json:"To,omitempty"`
	Amount       string `protobuf:"bytes,7,opt,name=Amount" json:"Amount,omitempty"`
	GasPrice     int64  `protobuf:"varint,8,opt,name=GasPrice" json:"GasPrice,omitempty"`
	GasLimit     int64  `protobuf:"varint,9,opt,name=GasLimit" json:"GasLimit,omitempty"`
	Nonce        int32  `protobuf:"varint,10,opt,name=Nonce" json:"Nonce,omitempty"`
	Status       int32  `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty"`
	BlockTime    int64  `protobuf:"varint,12,opt,name=BlockTime" json:"BlockTime,omitempty"`
	TxpoolTime   int64  `protobuf:"varint,13,opt,name=TxpoolTime" json:"TxpoolTime,omitempty"`
	BlockHeight  int64  `protobuf:"varint,14,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
	Resync       bool   `protobuf:"varint,15,opt,name=Resync" json:"Resync,omitempty"`
}

func (m *ETHTransaction) Reset()                    { *m = ETHTransaction{} }
func (m *ETHTransaction) String() string            { return proto.CompactTextString(m) }
func (*ETHTransaction) ProtoMessage()               {}
func (*ETHTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ETHTransaction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ETHTransaction) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *ETHTransaction) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

func (m *ETHTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ETHTransaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ETHTransaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ETHTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ETHTransaction) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ETHTransaction) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ETHTransaction) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ETHTransaction) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ETHTransaction) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ETHTransaction) GetTxpoolTime() int64 {
	if m != nil {
		return m.TxpoolTime
	}
	return 0
}

func (m *ETHTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ETHTransaction) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

type BlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *BlockHeight) Reset()                    { *m = BlockHeight{} }
func (m *BlockHeight) String() string            { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()               {}
func (*BlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MempoolToDelete struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *MempoolToDelete) Reset()                    { *m = MempoolToDelete{} }
func (m *MempoolToDelete) String() string            { return proto.CompactTextString(m) }
func (*MempoolToDelete) ProtoMessage()               {}
func (*MempoolToDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MempoolToDelete) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type WatchAddress struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *WatchAddress) Reset()                    { *m = WatchAddress{} }
func (m *WatchAddress) String() string            { return proto.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()               {}
func (*WatchAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type MempoolRecord struct {
	Category int32  `protobuf:"varint,1,opt,name=category" json:"category,omitempty"`
	HashTX   string `protobuf:"bytes,2,opt,name=hashTX" json:"hashTX,omitempty"`
}

func (m *MempoolRecord) Reset()                    { *m = MempoolRecord{} }
func (m *MempoolRecord) String() string            { return proto.CompactTextString(m) }
func (*MempoolRecord) ProtoMessage()               {}
func (*MempoolRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MempoolRecord) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *MempoolRecord) GetHashTX() string {
	if m != nil {
		return m.HashTX
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RawTx struct {
	Transaction string `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RawTx) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

type AddressToResync struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *AddressToResync) Reset()                    { *m = AddressToResync{} }
func (m *AddressToResync) String() string            { return proto.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()               {}
func (*AddressToResync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UsersData struct {
	Map map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsersData) Reset()                    { *m = UsersData{} }
func (m *UsersData) String() string            { return proto.CompactTextString(m) }
func (*UsersData) ProtoMessage()               {}
func (*UsersData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

type AddressExtended struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressExtended) Reset()                    { *m = AddressExtended{} }
func (m *AddressExtended) String() string            { return proto.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()               {}
func (*AddressExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyInfo) Reset()                    { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()               {}
func (*ReplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Balance)(nil), "eth.Balance")
	proto.RegisterType((*Nonce)(nil), "eth.Nonce")
	proto.RegisterType((*ETHTransaction)(nil), "eth.ETHTransaction")
	proto.RegisterType((*BlockHeight)(nil), "eth.BlockHeight")
	proto.RegisterType((*MempoolToDelete)(nil), "eth.MempoolToDelete")
	proto.RegisterType((*WatchAddress)(nil), "eth.WatchAddress")
	proto.RegisterType((*MempoolRecord)(nil), "eth.MempoolRecord")
	proto.RegisterType((*Empty)(nil), "eth.Empty")
	proto.RegisterType((*RawTx)(nil), "eth.RawTx")
	proto.RegisterType((*AddressToResync)(nil), "eth.AddressToResync")
	proto.RegisterType((*UsersData)(nil), "eth.UsersData")
	proto.RegisterType((*AddressExtended)(nil), "eth.AddressExtended")
	proto.RegisterType((*ReplyInfo)(nil), "eth.ReplyInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommuunications service

type NodeCommuunicationsClient interface {
	EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error)
	EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error)
	EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error)
	EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error)
	EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error)
	EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error)
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error)
}

type nodeCommuunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommuunicationsClient(cc *grpc.ClientConn) NodeCommuunicationsClient {
	return &nodeCommuunicationsClient{cc}
}

func (c *nodeCommuunicationsClient) EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventInitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventAddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressNonce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[0], c.cc, "/eth.NodeCommuunications/EventGetAllMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventGetAllMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventGetAllMempoolClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventGetAllMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventGetAllMempoolClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[1], c.cc, "/eth.NodeCommuunications/EventAddMempoolRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventAddMempoolRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventAddMempoolRecordClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventAddMempoolRecordClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[2], c.cc, "/eth.NodeCommuunications/EventDeleteMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventDeleteMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventDeleteMempoolClient interface {
	Recv() (*MempoolToDelete, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventDeleteMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventDeleteMempoolClient) Recv() (*MempoolToDelete, error) {
	m := new(MempoolToDelete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventSendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[3], c.cc, "/eth.NodeCommuunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_NewTxClient interface {
	Recv() (*ETHTransaction, error)
	grpc.ClientStream
}

type nodeCommuunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsNewTxClient) Recv() (*ETHTransaction, error) {
	m := new(ETHTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeCommuunications service

type NodeCommuunicationsServer interface {
	EventInitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	EventAddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	EventGetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	EventGetAdressNonce(context.Context, *AddressToResync) (*Nonce, error)
	EventGetAdressBalance(context.Context, *AddressToResync) (*Balance, error)
	EventGetAllMempool(*Empty, NodeCommuunications_EventGetAllMempoolServer) error
	EventAddMempoolRecord(*Empty, NodeCommuunications_EventAddMempoolRecordServer) error
	EventDeleteMempool(*Empty, NodeCommuunications_EventDeleteMempoolServer) error
	EventResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	EventSendRawTx(context.Context, *RawTx) (*ReplyInfo, error)
	NewTx(*Empty, NodeCommuunications_NewTxServer) error
}

func RegisterNodeCommuunicationsServer(s *grpc.Server, srv NodeCommuunicationsServer) {
	s.RegisterService(&_NodeCommuunications_serviceDesc, srv)
}

func _NodeCommuunications_EventInitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventInitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventAddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventAddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAllMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventGetAllMempool(m, &nodeCommuunicationsEventGetAllMempoolServer{stream})
}

type NodeCommuunications_EventGetAllMempoolServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventGetAllMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventGetAllMempoolServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventAddMempoolRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventAddMempoolRecord(m, &nodeCommuunicationsEventAddMempoolRecordServer{stream})
}

type NodeCommuunications_EventAddMempoolRecordServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventAddMempoolRecordServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventDeleteMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventDeleteMempool(m, &nodeCommuunicationsEventDeleteMempoolServer{stream})
}

type NodeCommuunications_EventDeleteMempoolServer interface {
	Send(*MempoolToDelete) error
	grpc.ServerStream
}

type nodeCommuunicationsEventDeleteMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventDeleteMempoolServer) Send(m *MempoolToDelete) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventSendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventSendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).NewTx(m, &nodeCommuunicationsNewTxServer{stream})
}

type NodeCommuunications_NewTxServer interface {
	Send(*ETHTransaction) error
	grpc.ServerStream
}

type nodeCommuunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsNewTxServer) Send(m *ETHTransaction) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeCommuunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eth.NodeCommuunications",
	HandlerType: (*NodeCommuunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventInitialAdd",
			Handler:    _NodeCommuunications_EventInitialAdd_Handler,
		},
		{
			MethodName: "EventAddNewAddress",
			Handler:    _NodeCommuunications_EventAddNewAddress_Handler,
		},
		{
			MethodName: "EventGetBlockHeight",
			Handler:    _NodeCommuunications_EventGetBlockHeight_Handler,
		},
		{
			MethodName: "EventGetAdressNonce",
			Handler:    _NodeCommuunications_EventGetAdressNonce_Handler,
		},
		{
			MethodName: "EventGetAdressBalance",
			Handler:    _NodeCommuunications_EventGetAdressBalance_Handler,
		},
		{
			MethodName: "EventResyncAddress",
			Handler:    _NodeCommuunications_EventResyncAddress_Handler,
		},
		{
			MethodName: "EventSendRawTx",
			Handler:    _NodeCommuunications_EventSendRawTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventGetAllMempool",
			Handler:       _NodeCommuunications_EventGetAllMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventAddMempoolRecord",
			Handler:       _NodeCommuunications_EventAddMempoolRecord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventDeleteMempool",
			Handler:       _NodeCommuunications_EventDeleteMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommuunications_NewTx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x6f, 0xeb, 0x34,
	0x14, 0x6f, 0x9a, 0xa5, 0x6b, 0x4f, 0x7b, 0xdb, 0x8b, 0x37, 0x2e, 0x51, 0x05, 0xa8, 0x32, 0x9a,
	0xd4, 0x0b, 0xa8, 0x42, 0xbb, 0x42, 0xba, 0x0c, 0x78, 0xe8, 0xb6, 0xb2, 0x55, 0xda, 0x2a, 0x94,
	0x05, 0x8d, 0x57, 0x93, 0x98, 0x25, 0x5a, 0x12, 0x57, 0x89, 0xbb, 0xb5, 0xef, 0xc0, 0xa7, 0xe0,
	0xc3, 0x22, 0x1f, 0x3b, 0x69, 0xca, 0x8a, 0xe0, 0x85, 0xb7, 0xf3, 0x3b, 0xff, 0xff, 0xf9, 0x18,
	0xfa, 0x85, 0xcc, 0x39, 0x4b, 0x79, 0x3e, 0x59, 0xe6, 0x42, 0x0a, 0x62, 0x73, 0x19, 0xd1, 0xcf,
	0xe0, 0xf0, 0x9c, 0x25, 0x2c, 0x0b, 0x38, 0x71, 0x2b, 0xd2, 0xb5, 0x46, 0xd6, 0xb8, 0xe3, 0x95,
	0x90, 0x7e, 0x02, 0xce, 0x42, 0x28, 0x95, 0x63, 0x43, 0xa0, 0x82, 0xed, 0x69, 0x40, 0xff, 0xb4,
	0xa1, 0x3f, 0xf3, 0xaf, 0xfd, 0x9c, 0x65, 0x05, 0x0b, 0x64, 0x2c, 0x32, 0xf2, 0x06, 0x5a, 0x3f,
	0x15, 0x3c, 0x9f, 0x5f, 0x1a, 0x57, 0x06, 0x91, 0x11, 0x74, 0xef, 0x59, 0x92, 0x70, 0x39, 0xcf,
	0x42, 0xbe, 0x76, 0x9b, 0x23, 0x6b, 0xec, 0x78, 0x75, 0x16, 0xa1, 0xd0, 0x9b, 0x86, 0x61, 0xce,
	0x8b, 0x42, 0xab, 0xd8, 0xa8, 0xb2, 0xc3, 0x23, 0x04, 0x0e, 0xae, 0x59, 0x11, 0xb9, 0x07, 0xe8,
	0x1b, 0x69, 0xc5, 0xfb, 0x21, 0x17, 0xa9, 0xeb, 0x68, 0x9e, 0xa2, 0x49, 0x1f, 0x9a, 0xbe, 0x70,
	0x5b, 0xc8, 0x69, 0xfa, 0x42, 0x65, 0x35, 0x4d, 0xc5, 0x2a, 0x93, 0xee, 0xa1, 0xce, 0x4a, 0x23,
	0x32, 0x84, 0xf6, 0x15, 0x2b, 0x7e, 0xcc, 0xe3, 0x80, 0xbb, 0x6d, 0xac, 0xac, 0xc2, 0x46, 0x76,
	0x13, 0xa7, 0xb1, 0x74, 0x3b, 0x95, 0x0c, 0xf1, 0xb6, 0x1d, 0x80, 0x49, 0x9a, 0x26, 0xbd, 0x81,
	0xd6, 0x9d, 0x64, 0x72, 0x55, 0xb8, 0x5d, 0x64, 0x1b, 0x44, 0x3e, 0x86, 0xce, 0x79, 0x22, 0x82,
	0x47, 0x3f, 0x4e, 0xb9, 0xdb, 0x43, 0x57, 0x5b, 0x06, 0xf9, 0x14, 0xc0, 0x5f, 0x2f, 0x85, 0x48,
	0x50, 0xfc, 0x0a, 0xc5, 0x35, 0x8e, 0xea, 0x1c, 0x2a, 0x5f, 0xf3, 0xf8, 0x21, 0x92, 0x6e, 0x1f,
	0x15, 0xea, 0x2c, 0x15, 0xd7, 0xe3, 0xc5, 0x26, 0x0b, 0xdc, 0xc1, 0xc8, 0x1a, 0xb7, 0x3d, 0x83,
	0xe8, 0x09, 0xfc, 0x5d, 0x2d, 0xd2, 0x3e, 0xf4, 0x10, 0x0d, 0xa2, 0x27, 0x30, 0xb8, 0xe5, 0x29,
	0xc6, 0x13, 0x97, 0x3c, 0xe1, 0x92, 0xab, 0x9e, 0x46, 0xaa, 0xcf, 0x7a, 0x86, 0x48, 0xd3, 0x3f,
	0x2c, 0xe8, 0xdd, 0x33, 0x19, 0x44, 0x66, 0x22, 0x6a, 0x6d, 0x98, 0x26, 0xcb, 0xb5, 0x31, 0x50,
	0x45, 0x5a, 0xe9, 0x25, 0x68, 0xea, 0x76, 0xaf, 0xf6, 0x2e, 0x81, 0xfd, 0xef, 0x4b, 0x70, 0xf0,
	0x72, 0x09, 0xe8, 0x05, 0xbc, 0x32, 0xf9, 0x7a, 0x3c, 0x10, 0x79, 0xa8, 0x26, 0x15, 0x30, 0xc9,
	0x1f, 0x44, 0xbe, 0xc1, 0x4c, 0x1c, 0xaf, 0xc2, 0x58, 0x34, 0x2b, 0x22, 0xff, 0xe7, 0x32, 0x15,
	0x8d, 0xe8, 0x21, 0x38, 0xb3, 0x74, 0x29, 0x37, 0xf4, 0x2d, 0x38, 0x1e, 0x7b, 0xf6, 0xd7, 0x2a,
	0x39, 0xb9, 0x5d, 0x64, 0x53, 0x52, 0x9d, 0x45, 0xbf, 0x80, 0x81, 0x49, 0xc4, 0x17, 0xba, 0xc5,
	0xff, 0xdc, 0x03, 0xfa, 0x9b, 0x05, 0x1d, 0xb5, 0xfb, 0xc5, 0x25, 0x93, 0x8c, 0xbc, 0x05, 0x3b,
	0x65, 0x4b, 0xd7, 0x1a, 0xd9, 0xe3, 0xee, 0xe9, 0x47, 0x13, 0x2e, 0xa3, 0x49, 0x25, 0x9c, 0xdc,
	0xb2, 0xe5, 0x2c, 0x93, 0xf9, 0xc6, 0x53, 0x3a, 0xc3, 0x1b, 0x68, 0x97, 0x0c, 0xf2, 0x1a, 0xec,
	0x47, 0xbe, 0x31, 0xae, 0x15, 0x49, 0x3e, 0x07, 0xe7, 0x89, 0x25, 0x2b, 0x8e, 0xe5, 0x74, 0x4f,
	0x8f, 0xd1, 0x95, 0xc9, 0x6a, 0xb6, 0x96, 0x3c, 0x0b, 0x79, 0xe8, 0x69, 0x95, 0xb3, 0xe6, 0x7b,
	0x8b, 0x8a, 0x2a, 0xe7, 0x52, 0xfa, 0xff, 0x3e, 0x51, 0x7a, 0x02, 0x1d, 0x8f, 0x2f, 0x93, 0xcd,
	0x3c, 0xfb, 0x55, 0xa8, 0xf6, 0xa4, 0xbc, 0x28, 0xd8, 0x43, 0x75, 0x59, 0x0c, 0x3c, 0xfd, 0xdd,
	0x81, 0xa3, 0x85, 0x08, 0xf9, 0x85, 0x48, 0xd3, 0xd5, 0x2a, 0x8b, 0x03, 0xa6, 0x5a, 0x5c, 0x90,
	0x77, 0x30, 0x98, 0x3d, 0xf1, 0x4c, 0xce, 0xb3, 0x58, 0xc6, 0x2c, 0x99, 0x86, 0x21, 0xe9, 0xef,
	0xb6, 0x6b, 0xa8, 0x71, 0x15, 0x84, 0x36, 0xc8, 0x37, 0x40, 0xd0, 0x68, 0x1a, 0x86, 0x0b, 0xfe,
	0x5c, 0xee, 0xe7, 0x07, 0xa8, 0x57, 0x5f, 0xd9, 0x3d, 0xa6, 0x5f, 0xc3, 0x11, 0x9a, 0x5e, 0x71,
	0x59, 0x7f, 0x2b, 0x80, 0x8a, 0xb8, 0x21, 0xc3, 0xd7, 0x48, 0xd7, 0xa4, 0x18, 0xb1, 0x32, 0x9b,
	0xa2, 0x6b, 0x73, 0x26, 0xeb, 0xe3, 0x28, 0x97, 0x64, 0xa8, 0x9d, 0xe9, 0x93, 0xd9, 0x20, 0xdf,
	0xc3, 0x87, 0xbb, 0xa6, 0xe5, 0x19, 0xde, 0x6f, 0xdc, 0xd3, 0xd1, 0xcd, 0x41, 0x6e, 0x90, 0xf7,
	0xa6, 0x56, 0x65, 0x9e, 0x24, 0xe6, 0x21, 0xec, 0xe4, 0x4b, 0x90, 0xde, 0x79, 0x22, 0xb4, 0xf1,
	0x95, 0x45, 0xbe, 0x35, 0x81, 0xa7, 0x61, 0xb8, 0xfb, 0x7e, 0xfe, 0x8b, 0xf1, 0x99, 0x09, 0xab,
	0x0f, 0xc4, 0xbe, 0xb0, 0xc7, 0x75, 0xcb, 0xf2, 0x92, 0xa0, 0xed, 0x77, 0xc6, 0x56, 0x57, 0x54,
	0x8e, 0x67, 0x7f, 0xb9, 0x2f, 0x27, 0x34, 0x81, 0x3e, 0x5a, 0xdf, 0xf1, 0x2c, 0xd4, 0x2f, 0x55,
	0x47, 0x45, 0x7a, 0x8f, 0xfe, 0x97, 0xe0, 0x2c, 0xf8, 0x56, 0x4d, 0x27, 0x77, 0xa4, 0xe9, 0x9d,
	0xbf, 0x4a, 0xe5, 0xf6, 0x4b, 0x0b, 0xbf, 0xc4, 0x77, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xea,
	0xa9, 0xb7, 0x8c, 0x24, 0x07, 0x00, 0x00,
}
